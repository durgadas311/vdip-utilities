; This file contains convenience routines and interfaces to
; dslib. 
        
        PUBLIC GSTMP,PSTMP,PSTMP3,U2M,M2U,TMINIT,RCLK,MEMCPY,MEMSET

        EXT GSTAMP,PSTAMP,F$OPEN,F$CLOSE,R$READ,R$WRITE
        EXT U2PTIM,U2MTIM,M2UTIM,TIMINI,RCLOCK
        
        CSEG

        .Z80
        
; Get timestamp for file described by FCB
; Take pointer to a 15-byte buffer for create,
; access and modify stamps

; int gstmp(fcb, buf15) returns 0 on error
gstmp:  
        pop bc                  ; return address
        pop hl                  ; timebuf
        pop de                  ; fcb
        push de
        push hl
        push bc                 ; stack repaired
        call GSTAMP
        ld h,0
        ld l,a
        ret

; Set timestamp for all but CP/M 3
; Takes pointer to 15-byte buffer
;
; int pstmp(fcb, buf15) returns 0 on error
pstmp:  
        pop bc                  ; return address
        pop hl                  ; timebuf
        pop de                  ; fcb
        push de
        push hl
        push bc                 ; stack repaired
        call PSTAMP
        ld h,0
        ld l,a
        ret

; Unfortunately, there is no "clean" way to condition file
; timestamps under CP/M.  After asking around in the CP/M
; hobbyist community, Tilmann Reh suggested setting the 
; system in SCB to desired file date and restoring it
; afterwards.  Since the directory stamp is only updated on write
; operations, we read and writeback the first file sector
; for minimum impact. Unlike the other get/put stamp 
; routines, this takes a 6-byte buffer as input. Note that
; we do not save/restore seconds.  We don't know how long the        
; disk operation will take, so better to let the timer tick
; handle it. Remember that seconds are not part of the file
; stamp anyway - so it all works out and we end up with the
; correct system time on exit.
        
; parameters for get/set scb calls
scbparm:        
scboff: ds 1
scbop:  ds 1
scbval: ds 2

; offsets into SCB
dyoff equ 58h
hroff equ 5ah
mnoff equ 5bh

; store current system time
curdy:  ds 2
curhr:  ds 1
curmn:  ds 1

; new time to be set
filetm:
fildy:  ds 2
filhr:  ds 1
filmn:  ds 1
        
; int pstmp3(fcb, buf6) returns 0 on error
pstmp3: 
; save current system time
;
        ld a,0
        ld (scbop),a            ; operation is read

        ld a,dyoff
        ld (scboff),a           ; offset to day
        ld c,49
        ld de,scbparm
        call 5
        ld (curdy),hl           ; save day

        ld a,hroff
        ld (scboff),a
        ld c,49
        ld de,scbparm
        call 5
        ld (curhr),hl           ; hour and min
;
; Get C call parameters
;
        ld hl,2
        add hl,sp
        ld e,(hl)
        inc hl
        ld d,(hl)               ; buf --> de
        inc hl
        ld c,(hl)
        inc hl
        ld b,(hl)               ; fcb --> bc

        push bc             ; save fcb address
;               
; convert dslib --> CPM3 time
;
        ld hl,filetm        ; de points to dslib time
        call U2PTIM         ; translate to CPM3 time
;
; set SCB timestamp to that of source file
;        
        ld a,0feh
        ld (scbop),a            ; operation is set word
        
        ld a,dyoff
        ld (scboff),a
        ld hl,(fildy)
        ld (scbval),hl
        ld c,49
        ld de,scbparm
        call 5                  ; set new date
        
        ld a,hroff
        ld (scboff),a
        ld hl,(filhr)
        ld (scbval),hl
        ld c,49
        ld de,scbparm
        call 5                  ; set new hour and minute
;
; re-write block 0 of file to condition stamp        
;
        pop de                  ; recover fcb address
                
        call F$OPEN             ; open
        jr nz,pstend

        ld hl,0
        call R$READ             ; read block 0
        jr nz,pstend

        ld hl,0
        call R$WRITE         ; and write back to use current BDOS time
        jr nz,pstend

        call F$CLOSE
pstend:
        push af                 ; save rewrite rc
;
; restore system time
;
        ld a,0feh
        ld (scbop),a            ; operation is set word
        
        ld a,dyoff
        ld (scboff),a
        ld hl,(curdy)
        ld (scbval),hl
        ld c,49
        ld de,scbparm
        call 5                  ; restore old date
        
        ld a,hroff
        ld (scboff),a
        ld hl,(curhr)
        ld (scbval),hl
        ld c,49
        ld de,scbparm
        call 5                  ; restore hour and minute
;
; invert status to agree with gstmp and pstmp 
;
        pop af
        ld a,1                  ; assum ok
        jr z,pout
        ld a,0                  ; ng
pout:
        ld h,0
        ld l,a
        ret

; Convert DSLIB universal format to MS-DOS
; int u2m(buf6, dos)
u2m:    
        pop bc                  ; return addr
        pop hl                  ; msdos buf
        pop de                  ; utime mod buf
        push de
        push hl
        push bc                 ; stack fixed
        call U2MTIM
        ld h,0
        ld l,a
        ret

; Convert MS-DOS to universal format
; int m2u(buf6, dos)
m2u:    
        pop bc                  ; return addr
        pop hl                  ; msdos buf
        pop de                  ; utime mod buf
        push de
        push hl
        push bc                 ; stack fixed
        call M2UTIM
        ld h,0
        ld l,a
        ret

; Initialize DSLIB and detect stamp method and clock
; int tminit()
tminit: 
        call TIMINI
        ld h,0
        ld l,a
        ret

; Read RTC using DSLIB and fill buffer
; int rclk(buf6)
rclk:   
        pop bc                  ; return address
        pop hl                  ; timebuf
        push hl
        push bc                 ; stack repaired
        call RCLOCK
        ld h,0
        ld l,a
        ret

; memcpy(dst, src, count)
memcpy: 
        pop hl
        ld (retadr),hl          ; pop and store it
        pop bc                  ; count
        pop hl                  ; source
        pop de                  ; dest
        push de
        push hl
        push bc                 ; fix stack
        ldir                    ; do it
        ld hl,(retadr)
        push hl                 ; restore return address
        ret

retadr: ds 2                    ; for return address

; memset(dst, char, count)        
memset: 
        pop hl
        ld (retadr),hl           ; pop and store it
        pop bc                  ; count
        pop de                  ; value
        pop hl                  ; dest
        push hl
        push de
        push bc                 ; fix stack
        ld b,c
setlp:
        ld (hl),e
        inc hl
        djnz setlp
        
        ld hl,(retadr)
        push hl                 ; restore return address
        ret

        end

