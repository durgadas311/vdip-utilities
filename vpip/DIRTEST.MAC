;C/80 Compiler 3.1 (4/11/84) - (c) 1984 The Software Toolworks

;/********************************************************
;**
;** dirtest - test jig program to make sure I understand
;**	how to call the CP/M directory functions...
;**
;** reads directory of A: drive and stores values into
;** dynamically allocated internal array, then prints out
;** the array.
;**
;**	gfr 3/1/20
;*/
;#include "printf.h"
;/* printf.h: definitions for printf and fprintf to allow multiple args.
; */
;#undef printf
;#undef fprintf
;#undef sprintf
;#define printf prnt_1(),prnt_2
;#define fprintf prnt_1(),prnt_3
;#define sprintf prnt_1(),prnt_4
;
;#define	TRUE	1
;#define	FALSE	0
;#define	NUL		'\0'
;#define	DMA		0x80		/* CP/M DMA area */
;#define MAXD	256			/* maximum number of directory entries */
;/* CP/M file directory entry data structure */
;struct cpminfo {
;	char user;
;	char fname[8];
;	char fext[3];
;	char extent;
;	int  reserved;
;	char recused;
;	char abused[16];
;} cpmentry;
cpmentr::	DB	0,0,0,0,0,0,0,0,0,0,0,0,0
	DW	0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0
;/* Internally-used file directory data structure.
;** The 'tag' field is used to flag entries that
;** match the user-specified criteria.
;*/
;struct finfo {
;	char name[9];
;	char ext[4];
;	int isdir;
;	long size;
;	unsigned mdate;
;	unsigned mtime;
;	char tag;
;}fentry;
fentry::	DB	0,0,0,0,0,0,0,0,0,0,0,0,0
	DW	0,0,0,0,0
	DB	0
;/* array of pointers to directory entries */
;struct finfo *direntry[MAXD];
direntr::	DS	512
;int nentries;
nentrie::	DW	0
;/* bldcdir - read CP/M system directory file for specified
;** device and populate directory array, dynamically 
;** allocating memory for each entry.  Device is the drive
;** identifier, e.g. "A", "B", etc.
;*/
;bldcdir(device)

	PUBLIC	bldcdir
;char *device;
;{	
;	int i, j, bfn;
.d:	DW	0
.e:	DW	0
.f:	DW	0
;	struct finfo *entry;
.g:	DW	0
;	static char fcb[36];
.h:	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0
;	static char dfname[20];
.i:	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0
;	/* DMA area will contain an array of 4
;	** directory entries after BDOS calls
;	*/
;	struct cpminfo **dmaentry;
.j:	DW	0
;	struct cpminfo *ourentry;
.k:	DW	0
;	strcpy(dfname, device);

bldcdir:	LHLD	.k
	PUSH	H
	LHLD	.j
	PUSH	H
	LHLD	.g
	PUSH	H
	LHLD	.f
	PUSH	H
	LHLD	.e
	PUSH	H
	LHLD	.d
	PUSH	H
	LXI	H,.i
	PUSH	H
	LXI	H,16
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	PUSH	H
	CALL	strcpy
	POP	B
	POP	B
;	strcat(dfname, ":????????.???");
	LXI	H,.i
	PUSH	H
	LXI	H,.c
	PUSH	H
	CALL	strcat
	POP	B
	POP	B
;	makfcb(dfname, fcb);
	LXI	H,.i
	PUSH	H
	LXI	H,.h
	PUSH	H
	CALL	makfcb
	POP	B
	POP	B
;	
;	/* DMA will contain an array [0..3] of
;	** CP/M file entries after BDOS calls.
;	*/
;	dmaentry = (struct finfo **) DMA;
	LXI	H,128
	SHLD	.j
;	nentries = 0;
	LXI	H,0
	SHLD	nentrie
;	
;	/* use BDOS functions 17 and 18 to scan directory */
;	bfn=17;
	LXI	H,17
	SHLD	.f
;	while ((i = bdos(bfn,fcb)) != -1) {
.l:	LHLD	.f
	PUSH	H
	LXI	H,.h
	PUSH	H
	CALL	bdos
	POP	B
	POP	B
	SHLD	.d
	INX	H
	CALL	e.0##
	JZ	.m
;		/* have a match */
;		if ((entry = alloc(sizeof(fentry))) == 0)
	LXI	H,24
	PUSH	H
	CALL	alloc
	POP	B
	SHLD	.g
	CALL	c.not##
	JZ	.n
;			printf("Error allocating directory entry!\n");
	CALL	prnt_1
	LXI	H,.c+14
	PUSH	H
	CALL	prnt_2
	POP	B
;		else {
	JMP	.o
.n:	DS	0
;			ourentry = dmaentry[i];
	LHLD	.d
	DAD	H
	XCHG
	LHLD	.j
	DAD	D
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	SHLD	.k
;			/* copy pertinent HDOS fields to our entry */
;			for (j=0; j<8; j++)
	LXI	H,0
	SHLD	.e
.r:	LHLD	.e
	LXI	D,32760
	MOV	A,H
	XRI	128
	MOV	H,A
	DAD	D
	JC	.q
	JMP	.s
.p:	LHLD	.e
	INX	H
	SHLD	.e
	DCX	H
	JMP	.r
.s:	DS	0
;				entry->name[j] = ourentry->fname[j];
	LHLD	.g
	XCHG
	LHLD	.e
	DAD	D
	PUSH	H
	LHLD	.k
	INX	H
	XCHG
	LHLD	.e
	DAD	D
	MOV	A,M
	MOV	L,A
	RLC
	SBB	A
	MOV	H,A
	POP	D
	MOV	A,L
	STAX	D
	JMP	.p
.q:	DS	0
;			entry->name[8] = NUL;
	LHLD	.g
	LXI	D,8
	DAD	D
	MVI	M,0
;			for (j=0; j<3; j++)
	LXI	H,0
	SHLD	.e
.v:	LHLD	.e
	LXI	D,32765
	MOV	A,H
	XRI	128
	MOV	H,A
	DAD	D
	JC	.u
	JMP	.w
.t:	LHLD	.e
	INX	H
	SHLD	.e
	DCX	H
	JMP	.v
.w:	DS	0
;				entry->ext[j] = ourentry->fext[j];
	LHLD	.g
	LXI	D,9
	DAD	D
	XCHG
	LHLD	.e
	DAD	D
	PUSH	H
	LHLD	.k
	LXI	D,9
	DAD	D
	XCHG
	LHLD	.e
	DAD	D
	MOV	A,M
	MOV	L,A
	RLC
	SBB	A
	MOV	H,A
	POP	D
	MOV	A,L
	STAX	D
	JMP	.t
.u:	DS	0
;			entry->ext[3] = NUL;
	LHLD	.g
	LXI	D,9
	DAD	D
	INX	H
	INX	H
	INX	H
	MVI	M,0
;			
;			/* tag all as 'TRUE' for list matching */
;			entry->tag = TRUE;
	LHLD	.g
	LXI	D,23
	DAD	D
	MVI	M,1
;			
;			/* now store the entry and bump the count */
;			direntry[nentries++] = entry;
	LHLD	nentrie
	INX	H
	SHLD	nentrie
	DCX	H
	DAD	H
	LXI	D,direntr
	DAD	D
	PUSH	H
	LHLD	.g
	CALL	q.##
;		}
.o:	DS	0
;		bfn = 18;
	LXI	H,18
	SHLD	.f
;	}
	JMP	.l
.m:	DS	0
;	printf("%d matching entries found\n", nentries);
	CALL	prnt_1
	LXI	H,.c+49
	PUSH	H
	LHLD	nentrie
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
;}
.x:	POP	H
	SHLD	.d
	POP	H
	SHLD	.e
	POP	H
	SHLD	.f
	POP	H
	SHLD	.g
	POP	H
	SHLD	.j
	POP	H
	SHLD	.k
	RET
;/* listmatch - print device directory listing from
;** stored array.  Lists only entries with the "tag"
;** field set to TRUE.  if the argument "brief" is TRUE
;** then just do an abbreviated listing.
;*/
;listmatch(brief)

	PUBLIC	listmat
;int brief;
;{
;	int i, nfiles;
.y:	DW	0
.z:	DW	0
;	
;	nfiles = 0;

listmat:	LHLD	.z
	PUSH	H
	LHLD	.y
	PUSH	H
	LXI	H,0
	SHLD	.z
;	for (i=0; i<nentries; i++) {
	LXI	H,0
	SHLD	.y
.cb:	LHLD	nentrie
	XCHG
	LHLD	.y
	CALL	c.gt##
	JZ	.bb
	JMP	.db
.ab:	LHLD	.y
	INX	H
	SHLD	.y
	DCX	H
	JMP	.cb
.db:	DS	0
;		if(direntry[i]->tag) {
	LHLD	.y
	DAD	H
	LXI	D,direntr
	DAD	D
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	LXI	D,23
	DAD	D
	MOV	A,M
	ORA	A
	JZ	.eb
;			++nfiles;
	LHLD	.z
	INX	H
	SHLD	.z
;			printf("%-8s.%-3s\n", 
	CALL	prnt_1
	LXI	H,.c+76
	PUSH	H
;				direntry[i]->name,
	LHLD	.y
	DAD	H
	LXI	D,direntr
	DAD	D
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	PUSH	H
;				direntry[i]->ext);
	LHLD	.y
	DAD	H
	LXI	D,direntr
	DAD	D
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	LXI	D,9
	DAD	D
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
	POP	B
;		}
;	}
.eb:	JMP	.ab
.bb:	DS	0
;	printf("\n%d Files\n", nfiles);
	CALL	prnt_1
	LXI	H,.c+87
	PUSH	H
	LHLD	.z
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
;}
.fb:	POP	H
	SHLD	.y
	POP	H
	SHLD	.z
	RET
;main(argc,argv)

	PUBLIC	main
;int argc;
;char *argv[];
;{
;	printf("dirtest - 1 March 2020 - gfr\n");

main:	CALL	prnt_1
	LXI	H,.c+98
	PUSH	H
	CALL	prnt_2
	POP	B
;	bldcdir("A");
	LXI	H,.c+128
	PUSH	H
	CALL	bldcdir
	POP	B
;	listmatch(TRUE);
	LXI	H,1
	PUSH	H
	CALL	listmat
	POP	B
;}
	RET
;
	EXTRN	strcpy
	EXTRN	strcat
	EXTRN	makfcb
	EXTRN	bdos
	EXTRN	alloc
	EXTRN	prnt_1
	EXTRN	prnt_2
.c:
	DB	':????????.???'
	DB	0
	DB	'Error allocating directory entry!'
	DB	10
	DB	0
	DB	'%d matching entries found'
	DB	10
	DB	0
	DB	'%-8s.%-3s'
	DB	10
	DB	0
	DB	10
	DB	'%d Files'
	DB	10
	DB	0
	DB	'dirtest - 1 March 2020 - gfr'
	DB	10
	DB	0
	DB	'A'
	DB	0
	EXTRN	g.
	END
