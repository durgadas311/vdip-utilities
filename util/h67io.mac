; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
;
; h67io.mac
;
; These routines provide a 'C'-callable software interface 
; for I/O operations with the Heath/Zenith Z-67 mass 
; storage system via the WH-8-37 interface card on the H-8
; digital computer. They can also be used with the Z-89-67
; interface board for the Heath/Zenith Z-89 computer series,
; and other compatible interface cards.  The Z-67 can only
; be used in conjunction with a Z-80 processor, and this code
; is written using Z-80 instruction mnemonics.
;
; The disk I/O protocol is specified by the Z-67 
; controller board, which is the Data Technology MRX 101D.
; Details of that protocol are in the Z-67 documentation
; as well as the "Heathkit Manual for the Double-Density
; Disk Controller and Z-67 Interface" Model WH-8-37,
; part #595-2859, Heath Co., Benton Harbor, MI, 
; 1982, pp.53-60.
;
; The routines here are largely just replicated from the 
; sample assembler code in the WH-8-37 Heath manual, 
; however the calling interface here is designed for the
; Software Toolworks C/80 3.0 compiler.  The C/80 calling
; protocol is to push arguments (right-to-left) as
; 16-bit quantities on the stack.  Value functions are
; returned in the HL register.
;
; These routines are intended to be assembled with the
; Microsoft Macro-80 assembler which creates a relocatable 
; module that can be used as a stand alone (.REL) file or 
; stored in a library (.LIB file) using the Microsoft 
; LIB-80 Library Manager.  The Microsoft LINK-80 loader 
; program is then used to link this code with the main 
; (calling) program. 
;
; Usage is as follows:  The user must create a 6-byte
; command buffer (called "cmdq" in this example) and 
; populate that with the command number, logical unit,
; 21-bit sector address, number of blocks, and control
; byte as specified in the documentation.  A read call
; would then look like:
;
;  getcon();		/* get controller's attention	*/
;  outcom(cmdq);	/* send the command		*/
;  read67(buffer);	/* read the returned data	*/
;  return compst();	/* return completion status	*/
;
; Write operations would be similar but the caller must 
; also pre-load the buffer with data to write and substitute
; writ67 for the read67 call.
;
; Since the Z-67 I/O port is user-configurable the port
; number is specified here as the EXTRN variable PORT67.
; This means it must be declared in the main program and
; assigned a value before calling these routines, e.g.:
;
;  int port67;
;  port67 = 0274;
;
; The bcrc() routine computes a 16-bit cyclic redundancy
; check metric.  The Z-67 uses this metric to check for
; corruption of certain critical tables such as the Bad
; Sector table and the "Superblock" tables.  The bcrc()
; routine is called by passing a pointer to the buffer
; and a length parameter, e.g.:
;
;  check = bcrc(table, 512);
;
; Release: September, 2017
;
; 	Glenn Roberts
; 	glenn.f.roberts@gmail.com
;
; Revisions:
;
;	April, 2016:  Converted to Z80 instructions. Added
;		dynamic I/O using IN A,(C) and OUT (C),A
;		instructions.  Z80 processor is required
;		for H67 support anyway so not an issue.
;
;	September, 2017: Release version 1.0
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
;
;	Assemble for Z80 mnemonics
	.Z80
;
;	Public routines defined in this module:
;
	PUBLIC	GETCON,OUTCOM,READ67,WRIT67,COMPST,BCRC
;
	CSEG
;
;	PORT67 must be declared as a public 'int' in the
;	calling program. It is the storage location for 
;	the base I/O port for the Z-67 as configured on
;	the interface card.
;
	EXTRN	PORT67
;
;	Port mapping:
;
;	DATAIN  = PORT67
;	DATAOUT = PORT67
;	BCON    = PORT67+1
;	BSTAT   = PORT67+1
;
;
;	I/O bit masks
;

;
BS.BSY	EQU	00001000B
BC.EDT	EQU	00000010B
BC.SEL  EQU	01000000B
BS.OUT  EQU	01000000B
BS.REQ  EQU	10000000B
BS.COM  EQU	00010000B
BS.PE	EQU	00000010B
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
;
; getcon - Get Controller Attention
;
; 	C calling:
;		getcon();
;
; This routine gets the attention of the H67
; disk controller in preparation for a command.
; First it waits for NOT BUSY condition, then it
; asserts SEL and DB0 and waits for the controller to
; respond with a BUSY signal.  Then it removes SEL
; and asserts COMMAND mode to begin the command.
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
GETCON:	LD	A,(PORT67)	; I/O port
	LD	C,A		; C = base
	INC	C		; (PORT67)+1 = BSTAT/BCON port
GETC1:	IN	A,(C)		; input from status port (BSTAT)
	AND	BS.BSY		; test BUSY bit
	JP	NZ,GETC1	; wait for NOT BUSY
;
;	Assert SEL and DB0 on the host bus, then wait
;	for the controller to assert BUSY
;
	LD	A,BC.SEL	; assert SEL and DATA0
	OUT	(C),A		; to get attn of controller
GETC2:	IN	A,(C)		; get bus status
	AND	BS.BSY		; wait for BUSY
	JP	Z,GETC2
;
;	Assert Command/Data to indicate command mode transfer
;
	LD	A,BC.EDT	; Allow data enable
	OUT	(C),A		; BCON
	RET
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
;
; outcom - Output Command to H67 Controller
;
;	C calling: 
;		char *command;
;		outcom(command);
;
; This routine outputs the 6-byte Class 0 command data
; structure to the H67 controller, which is passed
; by reference. The routine executes the standard
; REQ handshaking to pass data.
;
; There are two ways to exit:
;  1) the controller can de-assert the command/data
;     line, in which case command mode is complete, or
;  2) the controller can assert the I/O line, in
;     which case the bus is being driven by the
;     controller.
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
OUTCOM:	POP	BC		; return
	POP	HL		; pointer to data
	PUSH	HL		; restore stack
	PUSH	BC

	LD	A,(PORT67)	; I/O port
	LD	C,A		; C = base
OUTC1:	INC	C		; +1 = status/control port
OUTC2:	IN	A,(C)		; test bus status
	LD	B,A		; save for later
	OR	A		; set flags
	JP	P,OUTC2		; loop if REQ not set

	AND	BS.COM		; COM de-asserted?
	JP	Z,OUTC3		; yes!, return

	LD	A,B		; get back status
	AND	BS.OUT		; test for OUT
	JP	Z,OUTC3		; controller driving - return!

	LD	A,(HL)		; fetch a byte from command queue
	DEC	C		; C = data port
	OUT	(C),A		; output it
	INC	HL		; point to next
	JP	OUTC1		; and loop...

OUTC3:	RET			; done!
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
;
; read67 - read data from the H67
;
;	C calling: 
;		char *buffer;
;		int read67(buffer);
;
; This is the low level read routine.  Prior to calling
; this you must first call getcon() to get the attention 
; of the controller, then call outcom() to output the
; actual READ command, then this routine services the read
; by reading data from the DATAIN port until completion
; status is asserted.
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
READ67:	POP	BC		; return
	POP	HL		; buffer
	PUSH	HL		; fix the stack
	PUSH	BC

	LD	A,(PORT67)	; I/O port
	LD	C,A		; C = Base
RD1:	INC	C		; +1 = status
RD2:	IN	A,(C)		; read status
	LD	B,A		; save it for later
	AND	BS.REQ		; waiting for REQ
	JP	Z,RD2		; else loop

	LD	A,B		; recall status
	AND	BS.COM		; check for COM
	JP	NZ,RD3		; set, exit loop
;
;	Now read actual data byte
;
	DEC	C		; -1 = data port
	IN	A,(C)		; get the byte
	LD	(HL),A		; store it
	INC	HL		; bump pointer
	JP	RD1		; and loop...
;
;	Exit
;
RD3:	RET
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
;
;	writ67 - write data to the H67
;
;	C calling: 
;		int writ67(buffer)
;
; This is the low level write routine. Before calling this
; you must first call getcon() to get the attention of the
; controller, then call outcom() to output the actual WRITE
; command, then this routine services the write by writing
; data to the DATAOUT port until completion status is asserted.
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
WRIT67:	POP	BC		; return
	POP	HL		; buffer
	PUSH	HL		; fix the stack
	PUSH	BC
	
	LD	A,(PORT67)	; I/O port
	LD	C,A		; C = Base
WR1:	INC	C		; +1 = bus status
WR2:	IN	A,(C)		; read status
	LD	B,A		; save it for later
	AND	BS.REQ		; waiting for REQ
	JP	Z,WR2		; no, loop

	LD	A,B		; restore status
	AND	BS.COM		; check for COM
	JP	NZ,WR3		; set, exit loop

	LD	A,(HL)		; get a byte
	DEC	C		; -1 = data port
	OUT	(C),A		; output it
	INC	HL		; bump pointer
	JP	WR1		; and loop...
;
;	Exit
;
WR3:	RET
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
;
; compst - check completion status
;
;	C calling:
;		int compst()
; returns:
;	0 = Normal completion
;	1 = Last byte non zero
;	2 = Non zero completion status
;	3 = Parity error
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
COMPST:	LD	A,(PORT67)	; I/O port
	LD	C,A		; C = base
	IN	A,(C)		; read completion byte
	LD	D,A		; save for later
	INC	C		; +1 = status/control port
CST1:	IN	A,(C)		; looking for last REQ
	LD	B,A		; save it too
	AND	BS.REQ		; test for REQ
	JP	Z,CST1		; loop 'til found

	DEC	C		; -1 = data port
	IN	A,(C)		; input final byte
	OR	A		; should be zero
	JP	Z,CST2		; OK, continue
;
;	ERROR - non zero last byte
;
	LD	HL,1		; Last Byte Not Zero!
	JP	CST5
;
;	Now check completion status byte
;
CST2:	LD	A,D		; fetch completion status
	OR	A		; set flags
	JP	Z,CST3		; zero OK!
;
;	ERROR - non zero completion status!
;
	LD	HL,2		; Non Zero Completion Status!
	JP	CST5
;
;	Now check for parity error
;
CST3:	LD	A,B		; last bus status
	AND	BS.PE		; Parity Error?
	JP	Z,CST4		; no OK!
;
;	ERROR - bus parity error
;
	LD	HL,3		; Bad Parity!
	JP	CST5
;
;	Normal return
;
CST4:	LD	HL,0

CST5:	RET
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
;
; bcrc - returns 16 bit cyclic redunancy check
;
;	C calling:
;		unsigned int bcrc(dat, len)
;		char *dat;
;		int len;
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
BCRC:	POP	DE		; return address
	POP	BC		; length (bytes)
	POP	HL		; buffer address
	PUSH	HL		; restore the stack
	PUSH	BC
	PUSH	DE

	LD	DE,0
CRC1$:	LD	A,B
	OR 	C
	JP	Z,CRC2$		; when BC==0, done
	LD	A,(HL)
	PUSH	HL
	PUSH	BC
	XOR	E
	LD	B,A
	RRCA
	RRCA
	RRCA
	RRCA
	LD	C,A
	XOR	B
	AND	0F0H
	XOR	D
	LD	L,A
	LD	A,C
	RLCA
	AND	1FH
	XOR	L
	LD	L,A
	LD	A,B
	RLCA
	AND	1
	XOR	D
	XOR	L
	LD	D,A
	LD	A,C
	AND	0F0H
	XOR	B
	LD	E,A
	LD	A,C
	XOR	B
	RLCA
	AND	0E0H
	XOR	E
	LD	E,A
	POP	BC
	POP	HL
	INC	HL
	DEC	BC
	JP	CRC1$
CRC2$:	EX	DE,HL		; HL = CRC result
	RET
;
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
;
	END
